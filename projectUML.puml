@startuml
package controller {
    class AddTerritoryListener {
        -toTerritory: String
        +AddTerritoryListener(GameFlowController gfController)
        +handle(javafx.event.ActionEvent event)
    }
    class MoveListener {
        +handle(javafx.event.ActionEvent event)
    }
    class AttackerDefenderController {
        attackerArmies: int
        defenderArmies: int
        +setAttacker(Player player)
        +getAttacker(): Player
        +setDefender(Player player)
        +getDefender(): Player
        +rollDice(int numDice, Random rand): Integer[]
        +setAttackingTerritory(Territory t)
        +getAttackingTerritory(): Territory
        +setDefendingTerritory(Territory t)
        +getDefendingTerritory(): Territory
        +setArmies(int i)
        +combat(int i, int j, Random rand)
        +update()
        +defenderLoses()
        +attack(Integer[] attackerDice, Integer[] defenderDice)
        +sortDice(Integer[] dice)
    }
    class AttackFromListener {
        +handle(MouseEvent event)
    }
    class AttackListener {
        +handle(MouseEvent event)
    }
    class CardListener {
        +CardListener(GameFlowController gfController)
        +handle(MouseEvent event)
    }
    class GameBoardController {
        tradeCounter: int
        map: String
        +initGame()
        +loadGameBoard()
        +updatePlayer(Continent continent)
        +getTerritoryOwner(String territoryName): int
        +isAdjacent(String firstTerritory, String secondTerritory): boolean
        +getTerritory(String territoryName): Territory
        +populateGameBoardDeckTroops()
        +getNewContinentPlayerArmies(int i): int
        +updateGameBoard()
        +getTradeCounter(): int
        +incrementTradeCounter()
        +checkOwnedTerritory(String territory1, String territory2, String territory3, int player): Boolean
    }
    class GameBoardTerritoryController {
        map: String
        +GameBoardTerritoryController(GameBoard gameBoard)
        +loadTerritoryNeighboring()
        +getTerritoryOwner(String territoryName): int
        +isAdjacent(String firstTerritory, String secondTerritory): boolean
        +getTerritory(String territoryName): Territory
        +checkOwnedTerritory(String territory1, String territory2, String territory3, int player);
    }
    class GameFlowController {
        -{static}rand: Random
        phase: String
        converted: ObservableList<String>
        messages: ResourceBundle
        +GameFlowController(PhaseController phaseController, PlayerController playerController, GameBoardController gbcontroller, AttackerDefenderController adc, GraphicUserInterface gui, ResourceBundle msg)
        +connectToGui()
        +addInfantrytoTerritoryfromString(String string)
        +updatePhase()
        +initiateCombat(String string, String string2, Random rand2, int attackerdice, int defenderdice)
        +randomizeCombat(Random rand2, int attackerdice, int defenderdice)
        +finishCombat()
        +verifyOwnership(String territoryName): boolean
        +verifyAdjacent(String firstName, String secondName): boolean
        +next_phase()
        +changeGuiButtons(boolean addArmy, boolean nextTurn, boolean attack, boolean spendCards, boolean attackFrom)
        +getPhase(): String
        +turnInCards(Card card1, Card card2, Card card3)
        +convertCardForGui(Card toconvert): String
        +updateCardsOnGui()
        +getMessage(String key): String
        +setMessages(ResourceBundle messagesBundle)
        +setLanguage()
        +checkForPointOnTerritory(): String
        +getTerritory(String lastclickedstring): Territory
        +setCurrentTerritoryArmyCount(int armyCount)
        +setCurrentTerritoryPlayer(int player)
        +performCardTransaction()
        +clickedOnValidLocation(): boolean
        +fortifyTerritory(String fromTerritory, String toTerritory)
        +addArmy()
        +next()
        +swapToAlternatePhaseController(String gameMode)
    }
    class GameModePopUpLauncher {
        +GameModePopUpLauncher(GameFlowController gfController)
        +handle(MouseEvent event)
    }
    class Main {
        +start(Stage primaryStage) throws Exception
    }
    class NextButtonListener {
        +NextButtonListener(GameFlowController gfController)
        +handle(MouseEvent event)
    }
    abstract class Phase {
        #phaseName: String
        +Phase(String phaseName)
        +doPhase()
        +{abstract}nextPhase()
        +getPhaseName(): String
    }
    class PhaseController {
        -phase: String
        -updateCards: boolean
        +PhaseController(PlayerController playerController, GameBoardController gameBoardController)
        +next_phase()
        +setPhase(String phase)
        +getPhase(): String
        +getUpdateCards(): boolean
    }
    class AssignmentPhase extends Phase {
        +AssignmentPhase()
        +doPhase()
        +nextPhase()
    }
    class AttackPhase extends Phase {
        +AttackPhase()
        +doPhase()
        +nextPhase()
    }
    class FortifyPhase extends Phase {
        +FortifyPhase()
        +doPhase()
        +nextPhase()
    }
    class SetupPhase extends Phase {
        +SetupPhase()
        +doPhase()
        +nextPhase()
    }
    class PlayerController {
        currentIndex: int
        initSetup: boolean
        +gameMode: String
        +addPlayer(Player player)
        +getCurrentPlayer(): Player
        +getcurrentIndex(): int
        +initializePlayer()
        +addInfantryToTerritory(Territory territory, int armies)
        +transferToOwnedTerritory(Territory territory, int armies, Player currPlayer)
        +transferToNewTerritory(Territory territory, int armies, Player currPlayer)
        +setTerritoryOwnership(Territory territory)
        +nextPlayer()
        +setInitSetup(boolean initSetup)
        +calculateTurnArmies(): int
        +addNewArmiestoPlayer()
        +moveArmy(Territory territoryFrom, Territory territoryTo, int pieces)
        +getInit(): boolean
        +playerDonePlacingNew(): boolean
        +playerDoneWithCards(): boolean
        +addArmiesToCurrentPlayer(int i)
        +addCardToCurrentPlayer(Card card)
        +spendCards(Card card1, Card card2, Card card3)
        +checkAllCardsAreSameType(Card card1, Card card2, Card card3): boolean
        +checkTwoSameAndOneWildcard(Card wild, Card card1, Card card2): boolean
        +checkAllCardsAreUniqueType(Card card1, Card card2, Card card3): boolean
        +cardsAreValid(Card card1, Card card2, Card card3): boolean
        +getCurrentPlayerCards(): ArrayList<Card>
        +playerLoss()
        +getPlayer(int player): Player
        +getNumberOfPlayers(): int
        +setGameMode(String gameMode)
        +setNumberOfPlayers(int numPlayers): int
    }
    class PlayerSetListener {
        +PlayerSetListener(GameFlowController gfc)
        +handle(MouseEvent event)
    }
    class PopUpLauncher {
        +PopUpLauncher(GameFlowController gfController)
        +handle(MouseEvent event)
    }

    AddTerritoryListener->GameFlowController
    AttackerDefenderController-UP->"*"model.Player
    AttackerDefenderController-UP->"*"model.Territory
    AttackFromListener-->GameFlowController
    AttackFromListener +-- AttackListener
    CardListener-->GameFlowController
    GameBoardController-UP->model.GameBoard
    GameBoardController-UP->model.Deck
    GameBoardController-->GameBoardTerritoryController
    GameBoardTerritoryController-UP->model.GameBoard
    GameFlowController-DOWN->PhaseController
    GameFlowController-RIGHT->PlayerController
    GameFlowController-RIGHT->GameBoardController
    GameFlowController-->view.GraphicUserInterface
    GameFlowController-UP->AttackerDefenderController
    GameFlowController-UP->"2"model.Territory
    GameModePopUpLauncher-UP->GameFlowController
    NextButtonListener-->GameFlowController
    Phase->GameFlowController
    PhaseController-UP->"*"Phase
    PhaseController-UP->PlayerController
    PhaseController-UP->GameBoardController
    PlayerController-UP->"*"model.Player
    PlayerSetListener-UP->GameFlowController
    PopUpLauncher-UP->GameFlowController
    AddTerritoryListener +-- MoveListener
}

package model {
    class Card {
        +troopType: String
        +territory: String
        +Card(String territory)
        +Card(String territory, String troopType)
        +getTerritory(): String
        +getTroopType(): String
        +isValidTroopType(String inputString): boolean
    }
    class Continent {
        -player: int
        -name: String
        -value: int
        +Continent(ArrayList<Territory> territories, String name)
        +getPlayer(): int
        +getName(): String
        +setPlayer(int player)
        +isPlayerControlled(): int
        +isTerritoryExist(Territory territory): boolean
        +toString(): String
        +setValue(int i)
        +getValue(): int
    }
    class Deck {
        +Deck()
        +drawCard(): Card
        +addCard(Card card)
        +shuffle()
        +copyDeck(): ArrayList<Card>
        +checkForInvalidShuffle(ArrayList<Card> original, ArrayList<Card> shuffleDeck): boolean
    }
    class GameBoard {
        +getGameBoard(): GameBoard
        +getDeck(): Deck
        +addContinent(Continent continent)
        +toString(): String
        +addArmiesToTerritory(Territory territory, int armies)
        +getTerritoryArmies(Territory territory): int
        +getContinentPlayer(Continent continent): int
        +setPlayer(Territory territory, int player)
        +getTerritoryPlayer(Territory territory): int
        +doesContinentExist(Continent continent): boolean
        +doesTerritoryExist(Territory territory): boolean
        +getTerritoryFromString(String name): Territory
        +isAdjacent(String firstTerritory, String secondTerritory): boolean
        +setDeck(Deck deck)
        +drawFromMainDeck(): Card
        +getContinentFromString(String string): Continent
    }
    class Player {
        armies: int
        playerId: int
        territories: int
        countries: int
        caughtTerritory: boolean
        +Player()
        +setDeck(ArrayList<Card> deck)
        +Player(int id)
        +addPlayerArmies(int armies)
        +removePlayerArmies(int armies)
        +getPlayerArmies(): int
        +addTerritory()
        +getTerritories(): int
        +removeTerritory()
        +getId(): int
        +getDeck(): ArrayList<Card>
        +caughtTerritory(boolean val)
        +hasCaughtTerritory(): boolean
        +addCardToPlayer(Card card1)
    }
    class Territory {
        player: int
        armies: int
        name: String
        +Territory(String territoryName)
        +getName(): String
        +getPlayer(): int
        +setPlayer(int newplayer)
        +addArmies(int i)
        +getArmyCount()
        +getNeighboring(): ArrayList<String>
        +addNeighboring(Territory territory)
        +removeArmies(int i)
        +setArmyCount(int armies)
        +toString(): String
        +setHQ(boolean isHQ)
    }

    Continent-->"*"Territory
    Deck-->"*"Card
    GameBoard->GameBoard
    GameBoard-->"*"Continent
    GameBoard->Deck
    Player->"*"Card
    Territory-->"*"Territory
}

package view {
    class GraphicUserInterface {
        private EventHandler<MouseEvent> mouseListener;
        	territoriesBounds: ArrayList<Rectangle>
        	currentBounds: ArrayList<Rectangle>
        	territoryNames: ArrayList<String>
        	territoryColors: ArrayList<Color>
        	-stage: Stage
        	screenWidth: int
        	screenHeight: int
        	startingWidthAndHeight: int
        	boxWidthAndHeight: int
        	currentTerritoryArmyCount: int
        	currentTerritoryPlayer: int
        	-messages: ResourceBundle
        	nextTurn: Button
        	currentPlayer: Text
        	currentPlayerId: Text
        	playerArmies: Text
        	playerArmiesNumber: Text
        	territoryArmies: Text
        	territoryArmiesNumber: Text
        	territoryPlayer: Text
        	territoryPlayerNumber: Text
        	attack: Button
        	attackFrom: Button
        	language: Button
        	addArmy: Button
        	moveFrom: Button
        	setNumPlayers: Button
        	attackerDice: Text
        	defenderDice: Text
        	attackerDiceSlider: Slider
        	defenderDiceSlider: Slider
        	card1: ComboBox<String>
        	card2: ComboBox<String>
        	card3: ComboBox<String>
        	numPlayers: Text
        	numPlayersSlider: Slider;
        	maps: ComboBox<String>
        	spendCards: Button
        	currentPhase: Text
        	chooseGameMode: Button
            currentTerritoryDesc: Text
        	clickedTerritory: Text
        	testMode: boolean
        	clickedIndex: int
        	-territoryInsides: ArrayList<Rectangle>
        	attackingTerritory: String
        	transportingTerritory: String
        	map: String
        	+GraphicalUserInterface(ResourceBundle msg)
        	+GraphicalUserInterface(ResourceBundle msg, Stage stage)
        	+setupUI(boolean extraButtons)
        	+setLanguage(ResourceBundle msg, String phase)
        	+setMouseListener(EventHandler<MouseEvent> listener)
        	+setCurrentPlayer(String player)
        	+setCurrentPlayerArmies(String player)
        	+setTerritoryArmies(String armies)
        	+setTerritoryPlayer(String armies)
        	+victoryScreen()
        	+checkForPointOnTerritory(Point2D click): String
        	+setUpTerritoryNamesAndLocation(String filename)
        	+initializeFrame()
        	+addTerritoryBoundsToPane(Group root)
        	+paintTerritoryBounds()
        	+getTerritoryBox(int x, int y): Rectangle
        	+getColorForPlayer(int player): Color
        	+setTerritoryColor(String territory, int player)
        	+setTerritoryArmyCount(int armyCount)
        	+setCurrentTerritoryOwner(int player)
        	+setNumPlayers(String numArmies)
        	+setControlsVisibility(boolean b)
        	+changeNextTurnButton(boolean disabled)
        	+changeAttackButton(boolean disabled)
        	+changeAddArmyButton(boolean disabled)
        	+changeMoveFrom(boolean disabled)
        	+changeSpendCardsButton(boolean disabled)
        	+changeBackground()
        	+changeAttackFromButton(boolean disabled)
        	+setAttacking(String text)
        	+setTransporting(String text)
        	+gameFrame()
    }
}
@enduml