/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */

plugins {
	id 'jacoco'
    id 'java-library'
    id 'info.solidsoft.pitest' version '1.5.1'
    id "application"
}


repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

task application {
    mainClassName = 'Risk.controller.Main'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
//     testCompile 'junit:junit:4.+', 'org.easymock:easymock:3.4'
}
/*
// Checkstyle plugin
task checkstyle {
    toolVersion '8.41'
    configFile file("config/checkstyle/checkstyle.xml")
}
task checkstyleMain {
    source = 'src/main/java'
}
task checkstyleTest {
    source = 'src/test/java'
}
*/

pitest {
    targetClasses = ['Risk.*']  //by default "${project.group}.*"
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}
/*
task jacoco {
	toolVersion = "0.7.5+"
	}
	
task jacocoTestReport {
	dependsOn test
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}
test.finalizedBy(jacocoTestReport)
task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
	def parser = new XmlParser()
	parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
		false);
	parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
	parser.setFeature("http://xml.org/sax/features/namespaces", false)
	def reportNode = parser.parse(srcFile)
	reportNode.children().each {	
		if(it.name() == 'counter') {
			String type = it.@type
			float missed = it.@missed as float
			float covered = it.@covered as float
			float percentage = covered / (missed + covered) * 100
			println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)	
*/
